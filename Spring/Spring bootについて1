# 4/1作業内容：Spring bootについて1
## 該当コード
## 

IntelliJ IDEA という統合開発環境をインストールし、Spring bootで雛形を作成し、
IntelliJ IDEAにインポートして開発環境の構築を実施。
[IntelliJ IDEAインストール手順](https://sukkiri.jp/technologies/ides/intellij-idea/intellij-idea-mac.html)

[IntelliJ IDEAの公式ガイド](https://pleiades.io/help/idea/getting-started.html)

[intellij-ideaのショートカットキー](https://qiita.com/yoppe/items/f7cbeb825c071691d3f2)


## 1javaの雛形のSpring Initializrについて
[雛形作成](https://start.spring.io/)

<hr>

## 2build.gradleについて
Gradleは、主にJava向けに開発されたビルドツール
[Gradle (build.gradle) 読み書き入門](https://qiita.com/hatimiti/items/a127311d739c9d3e0045)

build.gradleとは多くの言語とプラットフォームに対応したオープンソースのビルド自動化ツールのこと。
<details>
  <summary>build.gradleの説明</summary>
  
```
ここは、プロジェクトで使用するGradleプラグイン（ビルドプロセスに追加の機能を提供するために使用）を定義する
plugins {
    id 'java'　//Javaアプリケーションをコンパイルしてビルドする基本的な機能を提供
    id 'org.springframework.boot' version '3.1.2' // Spring BootのGradleプラグインを特定のバージョンを適用する
    id 'io.spring.dependency-management' version '1.1.2'　//Spring Bootプロジェクトでの依存関係の管理を簡単にするための
}

ここはプロジェクトのグループIDを設定
group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}


ここは、プロジェクトの依存関係を解決するために使用されるリポジトリを指定。具体的には、repositoriesブロック内でmavenCentral()を指定することで、Maven Centralリポジトリをプロジェクトの依存関係を解決するためのリポジトリとして使用することをGradleに指示
repositories {
    mavenCentral()
}

```
</details>



<hr>

## 3　TodoApplication.javaについて
 Spring Boot アプリケーションを立ち上げるときに「実行の起点」となるクラス
Spring フレームワークで開発をする上では、アノテーションについて知識を広げることが重要
[Spring Boot アプリケーションのメインクラスについて](https://poco-tech.com/posts/spring-boot-introduction/detail-of-main-class/)

[そもそもアノテーションとは？](https://camp.trainocate.co.jp/magazine/spring-annotation/)
アノテーションは、プログラムの要素（クラス、メソッド、変数など）に対して追加され、それらの振る舞いに影響を与えたり、特定の情報を提供することができる

<details>
  <summary>アノテーションの用途</summary>
  
```
特定の警告を抑制する（@SuppressWarnings）や非推奨のメソッドやクラスの使用を示す（@Deprecated）など、コンパイラに対する指示をするために使用

ビルド時やデプロイ時のコード処理。コードを自動生成するために使用される

アノテーションの例

@Override: メソッドがスーパークラスのメソッドをオーバーライドしていることを示す
@Deprecated: メソッドやクラスが非推奨であることを示す

アノテーションの宣言
@interfaceキーワードを使用して宣言される

public @interface MyAnnotation {
    String value() default "Hello";
}

```
</details>

[誰もが一度はつまずくSpring Bootを解説♪-アノテーション構成編](https://stechup.co.jp/springboot-annotation2/)

## 作成したコード

<details>
  <summary>TodoApplication.javaコードの説明</summary>
  
```
package com.example.todo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication//Spring Bootアプリケーションの主要な構成部を示すアノテーション
public class TodoApplication {

	public static void main(String[] args) {
		SpringApplication.run(TodoApplication.class, args);
	}
}

```
</details>

<hr>

## 4 コントローラについて

Springにおけるコントローラーの作成は、クラスに@RestControllerまたは@Controllerアノテーションを追加することで作成できる
これらを追記することでコントローラーのクラスとして認識するようになる。

コントローラー内にルーティングを明示するアノテーションを記述する。引数に処理させたいURLを記述する。
`@GetMapping ,@PostMapping,`
[【初学者向け】Spring Bootにおけるコントローラーの役割と使い方について【MVC】](https://ramble.impl.co.jp/5411/)

- Getメソッドがきたら、HelloWorld返す
- トップページでハンドラーメソッドに処理させるように`@Controller("/")`を記述する


</details>

<details>
  <summary>コードの説明</summary>
  
```
```

</details>


<hr>

## 5 テンプレートエンジン Thymeleaf について
[Thymeleaf ](https://qiita.com/thirai67/items/64fd18810a8ccfedd459)

[公式サイト](https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf_ja.html)

Thymeleafの準備
gradle.buildに以下に内容を記述してローカルにダウンロード


`	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
`

コントローラの書き換え
戻り値をテンプレートエンジン経由で渡す

<hr>



<hr>


## 参考記事
[Springの公式ガイド](https://spring.pleiades.io/guides)

[Spring Initializr リファレンスガイド](https://spring.pleiades.io/initializr/docs/current/reference/html/)
